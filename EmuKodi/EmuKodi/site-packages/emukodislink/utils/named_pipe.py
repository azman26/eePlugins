import abc
import logging
import os
import random
import tempfile
import threading
from contextlib import suppress
from pathlib import Path


try:
    from ctypes import byref, c_ulong, c_void_p, cast, windll  # type: ignore[attr-defined]
except ImportError:
    pass


log = logging.getLogger(__name__)

_lock = threading.Lock()
_id = 0


class NamedPipeBase(abc.ABC):
    path: Path

    def __init__(self):
        global _id  # noqa: PLW0603
        with _lock:
            _id += 1
            self.name = f"emukodislinkpipe-{os.getpid()}-{_id}-{random.randint(0, 9999)}"
        log.info(f"Creating pipe {self.name}")
        self._create()

    @abc.abstractmethod
    def _create(self) -> None:
        raise NotImplementedError

    @abc.abstractmethod
    def open(self) -> None:
        raise NotImplementedError

    @abc.abstractmethod
    def write(self, data) -> int:
        raise NotImplementedError

    @abc.abstractmethod
    def close(self) -> None:
        raise NotImplementedError


class NamedPipePosix(NamedPipeBase):
    mode = "wb"
    permissions = 0o660
    fifo = None

    def _create(self):
        self.path = Path(tempfile.gettempdir(), self.name)
        os.mkfifo(self.path, self.permissions)

    def open(self):
        self.fifo = open(self.path, self.mode)

    def write(self, data):
        return self.fifo.write(data)

    def close(self):
        try:
            if self.fifo is not None:
                self.fifo.close()
        except OSError:
            raise
        finally:
            with suppress(OSError):
                self.path.unlink()
            self.fifo = None


NamedPipe = NamedPipePosix
