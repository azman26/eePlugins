# coding: utf-8
import os, os.path, sys
import xml.etree.cElementTree 
from streamlink.e2config import getE2config

# xbmc/interfaces/python/xbmcmodule/PythonAddon.cpp
# (with a little help from xbmcswift)
pythonVersion = '%s.%s' % (sys.version_info.major, sys.version_info.minor)
def doLog(tekst, mode = 'a'): open("/tmp/emukodi.log", mode).write('%s\n' % tekst)

def getaddonpath_params(item=None):
    module_path =sys.argv[0] #"/usr/lib/enigma2/python/Plugins/Extensions/TSmedia/addons/movies/plugin.video.glomovies/default.py"
    doLog('xbmcaddon.getaddonpath_params(%s)' % item)
    doLog('\t module_path = %s' % module_path)
      
    count=module_path.count("/") ##10 for xbmcaddons and XBMCAddons and 11 for TSmedia
    addon_path,addon_id=os.path.split(module_path)
    addons_path = "/usr/lib/python%s/site-packages/emukodi/PluginsSettings" % pythonVersion
    plugin_path = addon_path.replace("plugin://", addons_path)
    scripts_path = plugin_path
    addon_id = addon_id.replace('.pyc','').replace('.py','')
#    pass#print("addon path params:plugin_path,addons_path,scripts_path,addon_id",plugin_path,addons_path,scripts_path,addon_id)
    if item=='plugin_path':
        doLog('\t plugin_path = %s' % plugin_path)
        return plugin_path #/usr/lib/enigma2/python/Plugins/Extensions/XTkoodi,/usr/lib/enigma2/python/Plugins/Extensions/TSmedia,/usr/lib/enigma2/python/Plugins/Extensions/XBMCaddons
    if item=='addons_path':
        doLog('\t addons_path = %s' % addons_path)
        return addons_path  ##/usr/lib/enigma2/python/Plugins/Extensions/XBMCAddons/plugins,/usr/lib/enigma2/python/Plugins/Extensions/TSmedia/addons/movies,/usr/lib/enigma2/python/Plugins/Extensions/XBMC

    if item=='scripts_path':
        doLog('\t scripts_path = %s' % scripts_path)
        return scripts_path ##/usr/lib/enigma2/python/Plugins/Extensions/XBMCAddons/scripts,/usr/lib/enigma2/python/Plugins/Extensions/TSmedia/scripts,/usr/lib/enigma2/python/Plugins/Extensions/XBMC

    if item=="addon_id":
        doLog('\t addon_id = %s' % addon_id)
        return addon_id #example plugin.video.glowmovies
       
    if item is None:
        doLog('\t plugin_path = %s, addons_path = %s, scripts_path = %s, addon_id = %s' % plugin_path,addons_path,scripts_path,addon_id)
        return plugin_path,addons_path,scripts_path,addon_id
                       
                       
class Addon:
    def __init__(self, id=None):
        doLog('!!!!! xbmcaddon.Addon.__init__(%s)' % id)
        self.callingID = id
        if id is not None:## requested from addons or scripts
            if id.startswith("script"):
                self.id=id
                self.path=getaddonpath_params("scripts_path")+"/"+str(self.callingID)
            elif id.startswith("plugin"):   
                self.id=getaddonpath_params("addon_id")##get addon_id from sys.argv[0] for tsmedia reason we do not use self.id=id
                self.path=getaddonpath_params("addons_path")+"/"+str(self.callingID)
            else:
                self.id=getaddonpath_params("addon_id")##get addon_id from sys.argv[0] for tsmedia reason we do not use self.id=id
                self.path=getaddonpath_params("addons_path")+"/"+str(self.callingID)                          
        else: #either requested from addons not scripts 
            self.id = getaddonpath_params("addon_id")##we extract addon path params from sys.argv[0]
            self.path = getaddonpath_params("addons_path") + "/" + str(self.callingID)
        self.pluginSetingsSLPath = '/etc/streamlink/%s' % self.callingID.replace('plugin.video.', '')
        doLog('\t self.id = %s, self.path = %s, self.callingID = %s, self.pluginSetingsSLPath = %s' % (self.id, self.path, self.callingID, self.pluginSetingsSLPath))

    def getLocalizedString(self, idx=" "):
        if 0:
            pass#print("In xbmcaddon idx =", idx)
            xfile = self.path + "_strings.xml"
            ftxt = open(xfile, "r").read() 
            n1 = ftxt.find(str(idx), 0)
            if n1 < 0:
                    xtxt = str(idx)
                    return xtxt
            n2 = ftxt.find(">", n1)
            n3 = ftxt.find("<", n2)      
            xtxt = ftxt[(n2+1):n3]
            pass#print("In xbmcaddon xtxt B=", xtxt)
            return str(xtxt)
        else:
            return str(idx)

    def getSettingSL(self, settingName):
        if os.path.exists("%s/%s" % (self.pluginSetingsSLPath, settingName)):
            return open("%s/%s" % (self.pluginSetingsSLPath, settingName), "r").read().strip()
        else:
            return ''
           
    def getSetting(self,id=None):
        if not id is None:
            if os.path.exists("%s/%s" % (self.pluginSetingsSLPath, id)):
                return self.getSettingSL(id)
            
        item = '"' + str(id) + '"'
        
        checkDirs = [self.path, '/media/hdd/.kodi/addons/%s' % self.callingID, '/usr/share/kodi/addons/%s' % self.callingID]
        xfile = ''
        for CurDir in checkDirs:
            xfile = os.path.join(CurDir,"settings.xml")
            if os.path.exists(xfile):
                break
        if not os.path.exists(xfile):
            doLog('xbmcaddon.getSetting(%s) missing file: %s' % (id,xfile))
            return ''
        
        f = open(xfile, 'r').read()
        if item not in f:
            doLog('xbmcaddon.getSetting(%s) missing in settings.xml' % (id))
            return ""

        lines = []
        lines = f.splitlines()
        for line in lines:
#            pass#print("In xbmcaddon-py line =", line)
            if str(item) in line:
                pass#print("In xbmcaddon-py line B=", line)
                n2 = line.find(" default", 0)
                n3 = line.find('"', n2)
                n4 = line.find('"', (n3+1))
                xtxt = line[(n3+1):n4]
                break

        ##print("In xbmcaddon xtxt B=", xtxt)
        if xtxt.startswith("getE2config('"):
            #xtxt = xtxt.split("'")[1]
            xtxt = getE2config(xtxt.split("'")[1])
        return str(xtxt)

    def getSetting2(self,id=None):
        open("/tmp/emukodi.log", "a").write('xbmcaddon.getSetting2(%s)\n' % id)
        item = id
        xfile = self.path + "/resources/settings.xml" 
        if not os.path.exists(xfile):
            xfile = '/usr/lib/python2.7/site-packages/emukodi/PluginsSettings/%s.xml' % self.callingID
        if not os.path.exists(xfile):
            return ''
        f = open(xfile, 'r').read()
        if item not in f:
            return ""

        lines = []
        lines = f.splitlines()
        for line in lines:
            if str(id) in line:
                n2 = line.find("default", 0)
                n3 = line.find('"', n2)
                n4 = line.find('"', (n3+1))
                xtxt = line[(n3+1):n4]
                break

        pass#print("In xbmcaddon xtxt B=", xtxt)
        return xtxt


    def setSettingSL(self, settingName = "", settingValue = ""):
        if settingName is None or settingName.strip() == "":
            return False
        elif settingValue is None:
            return False
        open("%s/%s" % (self.pluginSetingsSLPath, settingName), "w").write('%s' % settingValue)

    def setSetting(self, id = " ", value = " "):
        if value is None:
            return False
        elif os.path.exists(self.pluginSetingsSLPath):
            return self.setSettingSL(id,value)
        
        item = id
        xfile = '/usr/lib/python3.12/site-packages/emukodi/PluginsSettings/%s.xml' % self.callingID
        f = open(xfile, 'r').read()
        if item not in f:
            nline = '<setting id="' + item + '" type="text" default="' + str(value) + '" visible="false" />\n'
            n1 = f.find("<setting id", 0)
            s1 = f[:n1]
            s2 = f[n1:]
            fnew = s1 + nline + s2
            f2 = open('/tmp/temp.xml', 'w')
            f2.write(fnew)
            f2.close()
        else:
            f2 = open('/tmp/temp.xml', 'w')
            lines = []
            lines = f.splitlines()
            for line in lines:
                if str(id) in line:
                    n2 = line.find("default", 0)
                    n3 = line.find('"', n2)
                    n4 = line.find('"', (n3+1))
                    s = line[n2:(n4+1)]
                    s2 = 'default="' + str(value) + '"'
                    line = line.replace(s, s2)
                line = line + "\n"
                f2.write(line)
        f2.close()
        cmd = "mv -f '/tmp/temp.xml' " + xfile
        os.system(cmd)  
        return True
             
    # sometimes called with an arg, e.g veehd
    def openSettings(self, arg=None):
          """get all settings."""
          try:    
                settings_xml=self.path + ".xml" 
                pass#print("283",settings_xml)
                tree = xml.etree.cElementTree.parse(settings_xml)
                root = tree.getroot()
                
                i=0
                list=[]
                for setting in root.iter('setting'):
                           
                            list.append((i,setting.attrib))##add dict for all settings in the line,i=line number
                            i=i+1
                pass#print("In openSettings list =",list)
                return list  
        #pass#print("*** openSettings ***")
          except:
                list=[]
                return list
                
    def getAddonInfo(self, item):
        open("/tmp/emukodi.log", "a").write('xbmcaddon.getAddonInfo(%s)\n' % item)
        item = item.lower()
        if item == "path":
            return self.path
        #print("In xbmcaddon item =", item)
        profile = '/hdd/.kodi/userdata/addon_data/' + str(self.id)
        if not os.path.exists(profile):
            cmd = "mkdir -p " + profile
            os.system(cmd)
        if item == "profile":
            return profile        

        xfile = self.path + "/addon.xml"
        #print("get_version xfile =", xfile)
        if os.path.exists(xfile):
            tree = xml.etree.cElementTree.parse(xfile)
            root = tree.getroot()
            version = str(root.get('version'))
            #print("get_version version =", version)
            author = str(root.get('provider-name'))
            name = str(root.get('name'))
            id = str(root.get('id'))
            if item == "version":
                return version
            elif item == "author":
                return author
            elif item == "name":
                return name
            elif item == "id":
                return id
        else:
            return "xxx"
